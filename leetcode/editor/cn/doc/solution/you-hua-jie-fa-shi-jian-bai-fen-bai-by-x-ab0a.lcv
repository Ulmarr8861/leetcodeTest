![image.png](https://pic.leetcode-cn.com/1635587773-TMehIX-image.png)

这题要求我们快速的根据例子，找到获取下一个排列的方案，然后使用代码将其实现。

这又是一道有关数字字典序的问题，不过与之前有一道题从左到右，使用单调栈写法寻找下一个更大或者更小的数不同的是，这次我们希望变化尽可能的小，因为我们遵循单调的思想，从右向左判断，直到不再单调，然后我们在之前排好序的部分找出大于目标的最小的一个数的下标，将两数交换。

关于获取大于一个数的最小数，我们使用二分法。

然后呢？我们需要将后续的数从小到大排序，我们应该怎么做？

当然使用排序不行的o(nlogn)，或者说有更好的方式。

由于右边部分的数组其实本来是从大到小排好序的，只是现在来了一个数是为排序的，因此我们先将那个交换到右边的数找好位置，然后将整个右边部分翻转一下就行，这样子的时间复杂度是o(n)

* 

```
class Solution {
    int n=0;
    public void nextPermutation(int[] nums) {
        boolean stop=false;
        n = nums.length;
        for (int i = n - 1; i > 0; i--) {
            if (nums[i - 1] < nums[i]) {
                int v = getIndex(nums, i, nums[i - 1]);
                swap(nums, i - 1, v);//交换两个数的值。
            //     //对后面的数进行排序。
            //     List<Integer> list = new ArrayList<>();
            //     for (int j = n-1; j >=i; j--) {
            //         list.add(nums[j]);
            //     }
            //   Collections.sort(list);
            //     int cur=0;
            //     for(int j=i;j<=n-1;j++){
            //         nums[j]=list.get(cur++);
            //     }
             //不使用排序
             while(v<n-1&&nums[v]<nums[v+1]){
                 swap(nums,v,v+1);
             }
             int l=i;
             int r=n-1;
             while(l<r){
                 swap(nums,l,r);
                 l++;
                 r--;
             }
                stop=true;
                break;
            }
        }
        if(!stop){
             int l=0;
             int r=n-1;
             while(l<r){
                 swap(nums,l,r);
                 l++;
                 r--;
             }
            }
    }
        public void swap(int[]nums,int l,int r){
            int temp=nums[l];
            nums[l]=nums[r];
            nums[r]=temp;
        }
        public int getIndex(int[]nums,int i,int value){
            int l=i;
            int r=n-1;
            while(l<r){
                int mid=(l+r+1)>>>1;
                if(nums[mid]>value){
                    l=mid;
                }else{
                    r=mid-1;
                }
            }
            return l;
        }
}
```

#### 总结

交换数组使用双指针。

获取下一个数的逻辑就是从右到左不符合单增的数，找到右边大于它的最小的数进行交换，然后不使用排序的这样很懒的解法，而是观察特点使用交换法将数组右边部分排序。
