### 解题思路

此处撰写解题思路
此题的思路就是把一个升序序列（较小值）逐步变为一个降序序列（较大值）。因此从末位开始遍历，遇到第一个非降序的位置停下记为i，再从末位遍历，找到第一个比i大的值即为j，交换i和j的值。然后将i后边的所有数字排序为升序，此使得到的结果即为刚好比原来大的整数值。
![image.png](https://pic.leetcode-cn.com/1635916742-flBQIn-image.png)

### 代码

* java

```java
class Solution {
    public void nextPermutation(int[] nums) {
        <!-- 设置flag -->
        boolean flag = true;
        <!-- 数组长度小于1，什么也不做 -->
        if (nums.length > 1) {
            <!-- 从末位开始遍历 -->
            for (int i = nums.length - 1; i > 0; i--) {
                <!-- 遇到第一个非降序的位置，停下 -->
                if (nums[i] > nums[i - 1]) {
                    <!-- 从末位开始遍历，找到第一个比非降序位置大的数字，并交换 -->
                    for (int j = nums.length - 1; j >= i; j--) {
                        if (nums[j] > nums[i - 1]) {
                            int temp = nums[j];
                            nums[j] = nums[i - 1];
                            nums[i - 1] = temp;
                            <!-- 设置flag为false -->
                            flag = false;
        <!-- 将第一个非降序位置后的所有数组调整为升序排列，这里使用的是简单选择排序 -->
                            for (int k = i; k < nums.length; k++) {
                                int index = k;
                                for (int l = k + 1; l < nums.length; l++) {
                                    if (nums[l] < nums[index]) {
                                        index = l;
                                    }
                                }
                                int temp1 = nums[k];
                                nums[k] = nums[index];
                                nums[index] = temp1;
                            }
                    <!-- 遇到第一个非降序的位置，调整完成后就跳出循环 -->
                            break;
                        }
                    }
                    <!-- 遇到第一个非降序的位置，调整完成后就跳出循环 -->

                    break;
                }
            }
            <!-- 如果flag为false说明数组不是完全的降序数组，如果为true，说明是降序，即最大数组，调升为最小数组，即全升序 -->
            if (flag) {
                int i = 0;
                int h = nums.length - 1;
                while (i < h) {
                    int temp = nums[i];
                    nums[i] = nums[h];
                    nums[h] = temp;
                    i++;
                    h--;
                }
            }
        }
    }
}
```

